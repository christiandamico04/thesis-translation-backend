# Questo file definisce un workflow di Continuous Integration (CI) utilizzando GitHub Actions. 
# Lo scopo è automatizzare i test del software ogni volta che viene apportata una modifica al 
# codice sul branch main. Questo processo garantisce che nuovo codice non introduca regressioni 
# o errori.

name: CI

# Il workflow si attiva automaticamente ad ogni push o pull request sul branch main.

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    # Questa è una delle funzionalità più potenti. Prima di eseguire i test, GitHub Actions avvia un 
    # container Docker con un database PostgreSQL "pulito" e dedicato esclusivamente a questa esecuzione. 
    # Questo garantisce che i test vengano eseguiti sempre su un database prevedibile. 

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: translation
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: changeme
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:                                                                        # Elenca alcune operazioni sequenziali
      - uses: actions/checkout@v3                                                 # Scarica il codice dal repository
      
      - name: Set up Python                                                                         
        uses: actions/setup-python@v4                                             # Prepara l'ambiente di Python 
        with:
          python-version: "3.13"
          
      - name: Install dependencies                                                # Installa tutte le librerie elencate nel file requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Wait for PostgreSQL and Debug Network
        run: |
          echo "Waiting 10 seconds for network to stabilize ..."
          sleep 10
          echo " - Network Status (netstat) - "
          netstat -tuln
          echo " - Hosts File (etc/hosts) - "
          cat /etc/hosts
          
      - name: Run migrations                                    
        env:
          DATABASE_URL: postgres://postgres:changeme@127.0.0.1:5432/translation   # Applica lo schema del database definito in models.py al database appena creato
        run: python manage.py migrate
        
      - name: Run tests                                                           # Esegue il comando python3 manage.py test, lanciando tutti i test definiti in app/test_app.py
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          DATABASE_URL: postgres://postgres:changeme@127.0.0.1:5432/translation   # Imposta la variabile d'ambiente per la connessione al database. Nota che l'host è 
                                                                                  # 127.0.0.1 (localhost), poiché GitHub Actions configura la rete interna per far sì 
                                                                                  # che il container dei test possa raggiungere il container del database su quella porta. 
        run: python manage.py test