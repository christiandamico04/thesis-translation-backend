# ========================================================================================
#             DIPENDENZE PYTHON PER IL SERVIZIO 'web'
# ========================================================================================
# Questo file dichiara le dipendenze Python necessarie per l'ambiente di esecuzione
# del servizio 'web'. L'uso di questo file garantisce la creazione di ambienti
# riproducibili, come specificato nel Dockerfile.web. Le librerie di
# Machine Learning sono intenzionalmente escluse e gestite dal servizio 'vllm-server'.
# -----------------------------------------------------------------------------------------

# --- Framework Web e API ---
# Componenti che costituiscono lo scheletro dell'applicazione web e dell'API RESTful.
Django                  # Il framework web principale su cui è basato l'intero progetto.
djangorestframework     # Libreria per la creazione di API RESTful robuste e scalabili su Django.
gunicorn                # Server WSGI (Web Server Gateway Interface) di livello produzione, utilizzato
                        # per eseguire l'applicazione Django nel container, come da entrypoint.sh.
whitenoise[brotli]      # Ottimizza il servizio dei file statici direttamente da Django in produzione,
                        # con il supporto per la compressione Brotli.

# --- Connessione al Database e Configurazione ---
# Librerie per l'interfacciamento con il database PostgreSQL e la gestione della configurazione.
psycopg2-binary         # L'adattatore (driver) necessario per permettere a Django di comunicare
                        # con il database PostgreSQL definito nel docker-compose.yml.
dj-database-url         # Utility per leggere la configurazione del database da una singola variabile
                        # d'ambiente (`DATABASE_URL`), come implementato in settings.py.

# --- Logica Applicativa e Comunicazioni Esterne ---
# Dipendenze utilizzate dal "service layer" per implementare la logica di business.
requests                # Libreria per effettuare richieste HTTP, utilizzata dal translation_service.py
                        # per comunicare con l'API del 'vllm-server'.
nltk                    # (Natural Language Toolkit) Utilizzata per la tokenizzazione dei testi
                        # in frasi durante il processo di chunking.
tzdata                  # Fornisce i dati dei fusi orari, necessari a Django per la gestione
                        # delle date e ore localizzate (`USE_TZ = True` in settings.py).

# --- Autenticazione ---
# Componenti per la gestione dell'autenticazione basata su token.
djangorestframework-simplejwt # Implementa l'autenticazione tramite JSON Web Tokens (JWT),
                              # configurata come metodo di default in settings.py.

# --- Testing ---
# Framework e plugin per l'esecuzione dei test automatizzati.
pytest                  # Framework di testing utilizzato per la validazione del codice.
pytest-django           # Plugin che integra pytest con Django, permettendo di scrivere test
                        # in modo più conciso e di gestire il database di test.